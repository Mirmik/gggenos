
import os

modules = [
'genos_module/aiop2560',
'kernel',
'compat/cxx',
#'compat/cxx_init',
'genos',
'compat/libc/genos_libc',
#'fs',
'mem',
'util'
]

INCLUDE = [
'include',
'compat/cxx/include',
'compat/libc/genos_libc/include',
'compat/posix/include'
]

def rfullname(s, ctx):
	return ('../' + ctx.path.relpath() + '/' + s)

def fullname(s, ctx):
	return (ctx.path.relpath() + '/' + s)

def _echo(s):
	return 'echo ' + s + ' && ' + s 

def build(ctx):

	modules.append('arch/' + ctx.env.ARCH)  
	for m in modules:
		ctx.recurse(m)

	ctx.env.INCLUDE += ' -I ' + rfullname('arch/' + ctx.env.ARCH + '/include', ctx) + ' '
	for s in INCLUDE:
		ctx.env.INCLUDE += ' -I ' + rfullname(s, ctx) + ' '


	files = os.listdir(ctx.path.relpath())
	print files

	for f in files:
		if not os.path.isdir(fullname(f,ctx)):
			ff = os.path.splitext(f)
			if ff[1] == '.cpp':
				ctx(rule = _echo(ctx.env.CXX_OBJ), source = f,	target = ff[0] + '.o')
				ctx.env.OBJS += ' ' + fullname(ff[0] + '.o', ctx) 
			if ff[1] == '.c':
				ctx(rule = _echo(ctx.env.CC_OBJ), source = f,	target = ff[0] + '.o')
				ctx.env.OBJS += ' ' + fullname(ff[0] + '.o', ctx) 